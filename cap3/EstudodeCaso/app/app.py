# Estudo de Caso - Deploy de App com Docker e Agente de IA Para Provisionamento de Infraestrutura com IaC
#=================================================
# ARQUIVO: app/app.py
#=================================================
# Este √© o script da aplica√ß√£o para criar a interface de usu√°rio e gerenciar a intera√ß√£o com o Agente de IA.
import os
import streamlit as st
from crewai import Agent, Task, Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente. Essencial para o Docker.
load_dotenv()

# --- Configura√ß√£o da P√°gina do Streamlit ---
st.set_page_config(
    page_title="Data Science Academy",
    page_icon=":100:",
    layout="wide"
)

st.title("ü§ñ Gerador de Scripts Terraform com Agente de IA")
st.markdown("""
Esta ferramenta utiliza um Agente de IA especializado para converter suas descri√ß√µes de infraestrutura 
em c√≥digo Terraform (HCL) pronto para uso.
""")

# --- Configura√ß√£o do Agente CrewAI ---
# O try-except garante que o app mostre um erro amig√°vel se a chave da API n√£o for encontrada.
try:
    openai_llm = ChatOpenAI(
        model="gpt-4-turbo",
        api_key=os.getenv("OPENAI_API_KEY")
    )
except Exception as e:
    st.error(f"Erro ao inicializar o modelo de linguagem: {e}. Verifique se a sua OPENAI_API_KEY est√° configurada no arquivo .env.")
    openai_llm = None

# Define o Agente de IA 
terraform_expert = Agent(
  role='Especialista S√™nior em Infraestrutura como C√≥digo',
  goal='Criar scripts Terraform precisos, eficientes e seguros com base nos requisitos do usu√°rio.',
  backstory=(
    "Voc√™ √© um Engenheiro de DataOps altamente experiente com uma d√©cada de experi√™ncia na automa√ß√£o "
    "de provisionamento de infraestrutura na nuvem usando Terraform. Voc√™ tem um profundo conhecimento "
    "dos provedores de nuvem como AWS, Azure e GCP, e √© mestre em escrever c√≥digo HCL (HashiCorp "
    "Configuration Language) limpo, modular e reutiliz√°vel. Sua miss√£o √© traduzir "
    "descri√ß√µes de alto n√≠vel da infraestrutura desejada em c√≥digo Terraform pronto para produ√ß√£o."
  ),
  verbose=True,
  allow_delegation=False,
  llm=openai_llm
)

# --- Interface do Usu√°rio ---
st.header("Descreva a Infraestrutura Desejada")

prompt = st.text_area(
    "Forne√ßa um prompt claro e detalhado. Quanto mais espec√≠fico voc√™ for, melhor ser√° o resultado.",
    height=150,
    placeholder="Exemplo: Crie o c√≥digo IaC com Terraform para criar um bucket S3 na AWS com o nome 'dsa-bucket-super-seguro-12345', com versionamento e criptografia SSE-S3 habilitados."
)

if st.button("Gerar Script Terraform", type="primary", disabled=(not openai_llm)):
    if prompt:
        with st.spinner("O Agente de IA est√° trabalhando... Pratique a paci√™ncia e aguarde."):
            try:
                # Define a tarefa para o agente com base no prompt do usu√°rio
                terraform_task = Task(
                    description=(
                        f"Com base na seguinte solicita√ß√£o do usu√°rio, gere um script Terraform completo e funcional. "
                        f"A sa√≠da deve ser APENAS o bloco de c√≥digo HCL, sem nenhuma explica√ß√£o ou texto adicional. "
                        f"O c√≥digo deve ser bem formatado e pronto para ser salvo em um arquivo .tf.\n\n"
                        f"Solicita√ß√£o do Usu√°rio: '{prompt}'"
                    ),
                    expected_output='Um bloco de c√≥digo contendo o script Terraform (HCL). O c√≥digo deve ser completo e n√£o deve conter placeholders como "sua_configuracao_aqui".',
                    agent=terraform_expert
                )

                # Cria e executa a equipe (Crew)
                terraform_crew = Crew(
                    agents=[terraform_expert],
                    tasks=[terraform_task],
                    process=Process.sequential,
                    verbose=True
                )

                # Inicia o processo e obt√©m o resultado
                result = terraform_crew.kickoff()
                
                # Exibe o resultado
                st.header("Resultado Gerado")
                st.code(result, language='terraform')
                st.success("Script gerado com sucesso! Obrigado DSA.")

            except Exception as e:
                st.error(f"Ocorreu um erro durante a execu√ß√£o: {e}")
    else:
        st.warning("Por favor, insira uma descri√ß√£o da infraestrutura para gerar o script.")

st.markdown("---")
st.markdown("Constru√≠do com [Streamlit](https://streamlit.io/) e [CrewAI](https://www.crewai.com/) na [Data Science Academy](https://www.datascienceacademy.com.br/)")
